using DG.Tweening;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Photon.Pun;
using Photon.Realtime;

public class CardSelectManager : MonoBehaviourPunCallbacks
{
    [SerializeField] private CanvasController canvasController;

    [SerializeField] private CardSelectCheckManager cardSelectCheckManager;

    [Header("전체 카드 프리팹 리스트")]
    public List<GameObject> allCardPrefabs; // 게임에서 사용할 전체 카드 프리팹 목록

    [Header("부모 레이아웃 그룹")]
    public Transform cardSpawnParent1; // 생성된 카드가 붙을 부모(캔버스 내 위치 컨테이너)
    public Transform cardSpawnParent2;

    [Header("출력할 카드 개수")]
    public int cardCountToShow = 3; // 한 번에 보여줄 카드 개수

    [Header("부채꼴 배치 설정")]
    public float xSpacing = 300f; // 카드 간 X 간격 고정값
    public float curveHeight = 150f; // Y 위치를 곡선처럼 주기 위한 값
    public float maxAngle = 60f; // 회전 시각 연출
    public float appearYOffset = -600f;


    private List<GameObject> currentCards = new(); // 현재 화면에 표시 중인 카드 목록
    [SerializeField] private bool hasSelect = false; // 플레이어가 카드를 선택했는지 여부

    void Start()
    {
        
        cardSelectCheckManager.cardSelectPanelSpawn();
        cardSelectCheckManager.CardSelectPanelSpawn(PhotonNetwork.LocalPlayer);
       // SceneLoadingManager.Instance.LoadSceneAsync("Game Scene");
        Debug.Log("게임 씬 으로 넘어가기 위해 로딩 진행");
    }

   private void Awake()
   {
       PhotonNetwork.AutomaticallySyncScene = true;
   }

    // 랜덤 카드 생성 및 화면에 출력
    [PunRPC]
    public void SpawnRandomCards1(bool canInteract)
    {
        if (allCardPrefabs.Count < cardCountToShow)
        {
            Debug.LogError("카드 프리팹이 부족합니다.");
            return;
        }

        List<int> selectedIndexes = new();
        while (selectedIndexes.Count < cardCountToShow)
        {
            int rand = Random.Range(0, allCardPrefabs.Count);
            if (!selectedIndexes.Contains(rand))
                selectedIndexes.Add(rand);
        }

        float centerIndex = (cardCountToShow - 1) / 2f;

        for (int i = 0; i < cardCountToShow; i++)
        {
            GameObject prefab = allCardPrefabs[selectedIndexes[i]];
            string prefabName = prefab.name;

            GameObject card = PhotonNetwork.Instantiate("CardPrefabs/" + prefabName, Vector3.zero, Quaternion.identity);
            card.transform.SetParent(cardSpawnParent1, false); // 반드시 worldPositionStays = false

            RectTransform rt = card.GetComponent<RectTransform>();
            CanvasGroup cg = card.GetComponent<CanvasGroup>();
            if (cg == null) cg = card.AddComponent<CanvasGroup>();

            float offset = i - centerIndex;
            float x = offset * xSpacing;
            float y = -Mathf.Abs(offset) * curveHeight + curveHeight;
            float rotZ = offset * 5f;

            if (rt != null)
            {
                rt.anchoredPosition = new Vector2(x, appearYOffset);
                rt.localRotation = Quaternion.Euler(0, 0, rotZ);
                cg.alpha = 0f;

                Sequence seq = DOTween.Sequence();
                seq.Append(rt.DOAnchorPos(new Vector2(x, y), 0.6f).SetEase(Ease.OutCubic));
                seq.Join(cg.DOFade(1f, 0.6f));
            }

            FlipCard flip = card.GetComponent<FlipCard>();
            if (flip != null)
            {
                flip.SetManager(this);
                if (PhotonNetwork.IsMasterClient)
                {
                    flip.SetInteractable(PhotonNetwork.IsMasterClient);
                }
                else
                {
                    flip.SetInteractable(!PhotonNetwork.IsMasterClient);
                }
            }

            currentCards.Add(card);
        }
    }

   //public void SpawnRandomCards2(bool canInteract)
   //{
   //    if (allCardPrefabs.Count < cardCountToShow)
   //    {
   //        Debug.LogError("카드 프리팹이 부족합니다.");
   //        return;
   //    }
   //
   //    List<int> selectedIndexes = new();
   //    while (selectedIndexes.Count < cardCountToShow)
   //    {
   //        int rand = Random.Range(0, allCardPrefabs.Count);
   //        if (!selectedIndexes.Contains(rand))
   //            selectedIndexes.Add(rand);
   //    }
   //
   //    float centerIndex = (cardCountToShow - 1) / 2f;
   //
   //    for (int i = 0; i < cardCountToShow; i++)
   //    {
   //        GameObject prefab = allCardPrefabs[selectedIndexes[i]];
   //        string prefabName = prefab.name;
   //
   //        GameObject card = PhotonNetwork.Instantiate("CardPrefabs/" + prefabName, Vector3.zero, Quaternion.identity);
   //        card.transform.SetParent(cardSpawnParent2, false); // 반드시 worldPositionStays = false
   //
   //        RectTransform rt = card.GetComponent<RectTransform>();
   //        CanvasGroup cg = card.GetComponent<CanvasGroup>();
   //        if (cg == null) cg = card.AddComponent<CanvasGroup>();
   //
   //        float offset = i - centerIndex;
   //        float x = offset * xSpacing;
   //        float y = -Mathf.Abs(offset) * curveHeight + curveHeight;
   //        float rotZ = offset * 5f;
   //
   //        if (rt != null)
   //        {
   //            rt.anchoredPosition = new Vector2(x, appearYOffset);
   //            rt.localRotation = Quaternion.Euler(0, 0, rotZ);
   //            cg.alpha = 0f;
   //
   //            Sequence seq = DOTween.Sequence();
   //            seq.Append(rt.DOAnchorPos(new Vector2(x, y), 0.6f).SetEase(Ease.OutCubic));
   //            seq.Join(cg.DOFade(1f, 0.6f));
   //        }
   //
   //        FlipCard flip = card.GetComponent<FlipCard>();
   //        if (flip != null)
   //        {
   //            flip.SetManager(this);
   //            flip.SetInteractable(!PhotonNetwork.IsMasterClient); // 마스터는 관전만
   //        }
   //
   //        currentCards.Add(card);
   //    }
   //}

    // 카드 하나가 선택되었을 때 호출됨
    public void OnCardSelected(GameObject selected)
    {

        if (hasSelect == true)
        {
            return;
        }


        hasSelect = true;

        Debug.Log("내 카드 선택 완료됨");

        if (cardSelectCheckManager.cardSelectPanels.TryGetValue(PhotonNetwork.LocalPlayer.ActorNumber, out CardSelectPanelItem panel))
        {
            panel.OnCardSelected();

            panel.SelectCheck(PhotonNetwork.LocalPlayer);
        }

      //  // 카드 효과 적용
      //  CardEffect effect = selected.GetComponent<CardEffect>();
      //  if ( effect != null)
      //  {
      //      Player player = GameObject.FindWithTag("Player");
      //
      //      if (player != null)
      //      {
      //          effect.ApplyEffect(player);
      //      }
      //  }

        foreach (GameObject card in currentCards)
        {
            if (card == null) continue;

            if (card == selected)
            {
                // 선택된 카드 → 페이드아웃
                CanvasGroup cg = card.GetComponent<CanvasGroup>();
                if (cg == null) cg = card.AddComponent<CanvasGroup>();

                cg.DOFade(0f, 0.5f)
                  .SetEase(Ease.InOutSine)
                  .OnComplete(() => Destroy(card)); // 애니메이션 끝나면 삭제
            }
            else
            {
                // 선택되지 않은 카드 → 회전 방향으로 이동 + 축소 + 페이드아웃
                RectTransform rt = card.GetComponent<RectTransform>();
                CanvasGroup cg = card.GetComponent<CanvasGroup>();
                if (cg == null) cg = card.AddComponent<CanvasGroup>();

                float angleZ = rt.localEulerAngles.z; // rotZ
                Vector2 direction = Quaternion.Euler(0, 0, angleZ) * Vector2.up; // 회전 방향 기준 위쪽
                Vector2 targetPos = rt.anchoredPosition + direction * 400f;

                Sequence seq = DOTween.Sequence();
                seq.Join(rt.DOAnchorPos(targetPos, 2f).SetEase(Ease.InCubic)); // 날아가듯 이동
                seq.Join(rt.DOScale(0.1f, 2f).SetEase(Ease.InCubic));           // 작아지기
                seq.Join(cg.DOFade(0f, 2f));
                seq.Join(rt.DOLocalRotate(new Vector3(180f, 180f, angleZ), 2f, RotateMode.FastBeyond360));
                seq.OnComplete(() => Destroy(card));
            }
        }

        Debug.Log("선택된 카드: " + selected.name);
        Debug.Log("게임 씬 으로 넘어가기 위해 로딩 진행");

        if (PhotonNetwork.IsMasterClient)
        {
            canvasController.photonView.RPC("RPC_SwitchToClientCanvas", RpcTarget.All);
        }



        // DOVirtual.DelayedCall(2f, () => SceneLoadingManager.Instance.AllowSceneActivation());
        // DOVirtual.DelayedCall(2f, () => PhotonNetwork.LoadLevel("Game Scene"));
    }

    public override void OnPlayerPropertiesUpdate(Player target, ExitGames.Client.Photon.Hashtable propertiesThatChanged)
    {
        base.OnPlayerPropertiesUpdate(target, propertiesThatChanged);

        if (propertiesThatChanged.ContainsKey("Select"))
        {
            cardSelectCheckManager.cardSelectPanels[target.ActorNumber].SelectCheck(target);

            if (PhotonNetwork.IsMasterClient && cardSelectCheckManager.AllPlayerCardSelectCheck() == true)
            {
                Debug.Log(" 모든 플레이어 카드 선택 완료 → Game Scene 로드");
                PhotonNetwork.LoadLevel("Game Scene");
            }
        }
    }

    


}
